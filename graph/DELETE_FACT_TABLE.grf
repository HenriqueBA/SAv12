<?xml version="1.0" encoding="UTF-8"?><Graph author="michel" created="Thu Aug 15 10:23:03 BRT 2013" guiVersion="3.4.4.P" id="1376591284372" licenseType="Commercial" modified="Mon Feb 17 16:04:24 BRT 2014" modifiedBy="robson.bezerra" name="DRE" revision="1.386" showComponentDetails="true">
<Global>
<Metadata id="Metadata2" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="_2Dates" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" recordSize="-1" type="delimited">
<Field eofAsDelimiter="false" format="yyyy-MM-dd" name="Min_Date" nullable="true" shift="0" size="0" type="date"/>
<Field eofAsDelimiter="false" format="yyyy-MM-dd" name="Max_Date" nullable="true" shift="0" size="0" type="date"/>
</Record>
</Metadata>
<Metadata fileURL="${META_DIR}/OneString.fmt" id="Metadata3"/>
<Metadata id="Metadata9" previewAttachment="./data/tmp/CONFIG_HJJ_HJK.csv" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="," name="CONFIG_HJJ_HJK" previewAttachment="./data/tmp/CONFIG_HJJ_HJK.csv" previewAttachmentCharset="ISO-8859-1" quoteChar="&quot;" quotedStrings="true" recordDelimiter="\n" recordSize="-1" skipSourceRows="1" type="delimited">
<Field eofAsDelimiter="false" name="HJJ_CDFATO" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="HJJ_PERINI" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="HJJ_PERFIN" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="HJJ_TIPFXA" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="HJJ_TIPPER" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="HJJ_INFPER" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="PARAM_START" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="PARAM_STATUS" nullable="true" shift="0" size="0" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachment="zip:(${DATA_TMP_DIR}/TOTVSSMARTANALYTICS.zip)#HJJ.csv" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="," name="HJJ" previewAttachment="zip:(${DATA_TMP_DIR}/TOTVSSMARTANALYTICS.zip)#HJJ.csv" previewAttachmentCharset="ISO-8859-1" quoteChar="&quot;" quotedStrings="true" recordDelimiter="\n" skipSourceRows="1" type="delimited">
<Field name="HJJ_CDFATO" type="string"/>
<Field name="HJJ_PERINI" type="string"/>
<Field name="HJJ_PERFIN" type="string"/>
<Field name="HJJ_TIPFXA" type="string"/>
<Field name="HJJ_TIPPER" type="string"/>
<Field name="HJJ_INFPER" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata0" previewAttachment="zip:(${DATA_TMP_DIR}/TOTVSSMARTANALYTICS.zip)#HJK.csv" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="," name="HJK" previewAttachment="zip:(${DATA_TMP_DIR}/TOTVSSMARTANALYTICS.zip)#HJK.csv" previewAttachmentCharset="ISO-8859-1" quoteChar="&quot;" quotedStrings="true" recordDelimiter="\n" skipSourceRows="1" type="delimited">
<Field name="HJK_CDFATO" type="string"/>
<Field name="HJK_CPARAM" type="string"/>
<Field eofAsDelimiter="false" name="HJK_VPARAM" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata4" previewAttachment="zip:(${DATA_TMP_DIR}/TOTVSSMARTANALYTICS.zip)#HJK.csv" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="," name="HJK_PARAM" previewAttachment="zip:(${DATA_TMP_DIR}/TOTVSSMARTANALYTICS.zip)#HJK.csv" previewAttachmentCharset="ISO-8859-1" quoteChar="&quot;" quotedStrings="true" recordDelimiter="\n" skipSourceRows="1" type="delimited">
<Field name="HJK_CDFATO" type="string"/>
<Field name="HJK_CPARAM" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata8">
<Record fieldDelimiter="|" name="PARAM_HJJ" recordDelimiter="\n" type="delimited">
<Field eofAsDelimiter="false" name="HJJ_CDFATO" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="HJJ_PERINI" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="HJJ_PERFIN" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="HJJ_TIPFXA" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="HJJ_TIPPER" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="HJJ_INFPER" nullable="true" shift="0" size="0" type="string"/>
<Field name="PARAM_FACT" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata6" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="PARAM_START" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="PARAM_VPARAM" type="string"/>
<Field name="PARAM_FACT" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata7" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="PARAM_STATUS" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="PARAM_VPARAM" type="string"/>
<Field name="PARAM_FACT" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata5" previewAttachment="${DATA_TRANSFORM_DIR}/purge_parameters.txt" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" label="purge_parameters.txt" name="Purge_parameters_txt" previewAttachment="${DATA_TRANSFORM_DIR}/purge_parameters.txt" previewAttachmentCharset="ISO-8859-1" quoteChar="both" quotedStrings="false" recordDelimiter="\n" skipSourceRows="0" type="delimited">
<Field name="Fact_Table" type="string"/>
<Field name="Date_Attribute" type="string"/>
<Field name="History_Level" type="string"/>
<Field eofAsDelimiter="false" name="History_Amount" type="integer"/>
<Field name="Fact_Name" type="string"/>
</Record>
</Metadata>
<Property fileURL="parameters/parametros.prm" id="GraphParameter0"/>
<Property fileURL="workspace.prm" id="GraphParameter5"/>
<LookupTable charset="ISO-8859-1" fileURL="${DATA_TRANSFORM_DIR}/purge_parameters.txt" id="LookupTable0" initialSize="512" key="Fact_Name" metadata="Metadata5" name="FACT_ATTRIBUTES" type="simpleLookup"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="760" id="Note2" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Delete Fato baseado nos arquivos de configuração HJJ/HJK " titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="1494" x="15" y="35"/>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" guiName="DataGenerator" guiX="458" guiY="319" id="DATA_GENERATOR" recordsNumber="1" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2

// Generates output record.
function integer generate() {
	$out.0.HJK_CDFATO = "";
	$out.0.HJK_CPARAM = "START";

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the generate. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if generate() throws an exception.
// function integer generateOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="guiDescription"><![CDATA[START]]></attr>
</Node>
<Node enabled="enabled" guiName="DataGenerator" guiX="438" guiY="600" id="DATA_GENERATOR1" recordsNumber="1" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2

// Generates output record.
function integer generate() {
	$out.0.HJK_CDFATO = "";
	$out.0.HJK_CPARAM = "STATUS";

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the generate. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if generate() throws an exception.
// function integer generateOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="guiDescription"><![CDATA[STATUS]]></attr>
</Node>
<Node enabled="enabled" guiName="ExtHashJoin" guiX="708" guiY="420" id="EXT_HASH_JOIN" joinKey="$HJK_CDFATO=$HJK_CDFATO;$HJK_CPARAM=$HJK_CPARAM" joinType="inner" type="EXT_HASH_JOIN">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.PARAM_VPARAM = left($in.0.HJK_VPARAM,8);
	$out.0.PARAM_FACT = $in.1.HJK_CDFATO;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="guiDescription"><![CDATA[START]]></attr>
</Node>
<Node enabled="enabled" guiName="ExtHashJoin" guiX="708" guiY="579" id="EXT_HASH_JOIN1" joinKey="$HJK_CDFATO=$HJK_CDFATO;$HJK_CPARAM=$HJK_CPARAM" joinType="inner" type="EXT_HASH_JOIN">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.PARAM_VPARAM = $in.0.HJK_VPARAM;
	$out.0.PARAM_FACT = $in.1.HJK_CDFATO;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="guiDescription"><![CDATA[STATUS]]></attr>
</Node>
<Node enabled="enabled" guiName="ExtHashJoin" guiX="971" guiY="469" id="EXT_HASH_JOIN2" joinKey="$PARAM_FACT=$PARAM_FACT#$PARAM_FACT=$PARAM_FACT" joinType="inner" type="EXT_HASH_JOIN">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.HJJ_CDFATO = $in.0.HJJ_CDFATO;
	$out.0.HJJ_PERINI = $in.0.HJJ_PERINI;
	$out.0.HJJ_PERFIN = $in.0.HJJ_PERFIN;
	$out.0.HJJ_TIPFXA = $in.0.HJJ_TIPFXA;
	$out.0.HJJ_TIPPER = $in.0.HJJ_TIPPER;
	$out.0.HJJ_INFPER = $in.0.HJJ_INFPER;
	$out.0.PARAM_STATUS = $in.1.PARAM_VPARAM;
	$out.0.PARAM_START = $in.2.PARAM_VPARAM;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="guiDescription"><![CDATA[União da HJJ e da HJK]]></attr>
</Node>
<Node charset="ISO-8859-1" enabled="enabled" fileURL="zip:(${DATA_TMP_DIR}/TOTVSSMARTANALYTICS.zip)#HJJ.csv" guiName="HJJ" guiX="458" guiY="181" id="HJJ" quoteCharacter="&quot;" quotedStrings="true" trim="true" type="DATA_READER"/>
<Node charset="ISO-8859-1" enabled="enabled" fileURL="zip:(${DATA_TMP_DIR}/TOTVSSMARTANALYTICS.zip)#HJK.csv" guiName="HJK" guiX="64" guiY="447" id="HJK" quoteCharacter="&quot;" quotedStrings="true" trim="true" type="DATA_READER"/>
<Node enabled="enabled" guiName="LookupJoin" guiX="1167" guiY="465" id="LOOKUP_JOIN" joinKey="HJJ_CDFATO" lookupTable="LookupTable0" type="LOOKUP_JOIN">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {

	$out.0.syntax_content = 
	iif($in.0.PARAM_STATUS=="" || $in.0.PARAM_STATUS == null,
		iif($in.0.HJJ_TIPFXA != "I" || $in.0.HJJ_INFPER == "F",
			iif($in.0.HJJ_TIPPER == "D",
				'DELETE FROM {attr.'+$in.1.Fact_Table+'.factsof} WHERE {'+$in.1.Date_Attribute+'.date.yyyymmdd} BETWEEN "'+ convertDate($in.0.PARAM_START) +'" AND "'+ convertDate($in.0.PARAM_START) +'"'
				,
				'DELETE FROM {attr.'+$in.1.Fact_Table+'.factsof} WHERE ("'+ convertDate(startMonth($in.0.PARAM_START)) +'" = {'+$in.1.Date_Attribute+'.date.yyyymmdd}) OR ("'+ convertDate(startMonth($in.0.PARAM_START)) +'" < {'+$in.1.Date_Attribute+'.date.yyyymmdd} AND "'+ convertDate(endMonth($in.0.PARAM_START)) +'" > {'+ $in.1.Date_Attribute+'.date.yyyymmdd})'
			)
			,
			'DELETE FROM {attr.'+$in.1.Fact_Table+'.factsof} WHERE {'+$in.1.Date_Attribute+'.date.yyyymmdd} BETWEEN "'+ convertDate($in.0.HJJ_PERINI) +'" AND "'+ convertDate($in.0.HJJ_PERFIN) +'"'
		)
		,'DELETE FROM {attr.'+$in.1.Fact_Table+'.factsof} WHERE 1 = 2'
	);
	
	return ALL;
}

function string startMonth(string paramStart){
	return left(paramStart,6) + "01";
}

function string endMonth(string paramStart){
	date dateStart = str2date(paramStart,"yyyyMMdd");
	integer nextMonth = str2integer(date2str(dateStart,"MM"))+1;
	integer yearStart = str2integer(date2str(dateStart,"yyyy"));
	string newMonth = iif(nextMonth == 13, 
						(yearStart+1)+"0101"
						,
						yearStart+ date2str(str2date(nextMonth+"","MM"),"MM") + "01"
					);
	
	return newMonth;
}

function string convertDate(string dateString){

	date dateFormat = str2date(dateString,"yyyyMMdd");
	string stringFormat = date2str(dateFormat,"yyyy-MM-dd");
	return stringFormat;
}


// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="guiDescription"><![CDATA[Lookup com o purge_parameters]]></attr>
</Node>
<Node enabled="enabled" guiName="MAQL DML Execute" guiX="1348" guiY="469" id="MAQL_DML_EXECUTE_DELETE_DATA_FATO" maqlInputField="syntax_content" type="MAQL_DML_EXECUTE">
<attr name="guiDescription"><![CDATA[APAGA DADOS DAS FATO POR CONFIGURAÇÃO]]></attr>
</Node>
<Node enabled="enabled" guiName="Reformat" guiX="249" guiY="456" id="REFORMAT" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.HJK_CDFATO = iif($in.0.HJK_CDFATO=="" || $in.0.HJK_CDFATO==null, "", $in.0.HJK_CDFATO);
	$out.0.HJK_CPARAM = $in.0.HJK_CPARAM;
	$out.0.HJK_VPARAM = $in.0.HJK_VPARAM;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Reformat" guiX="667" guiY="181" id="REFORMAT1" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.HJJ_CDFATO = $in.0.HJJ_CDFATO;
	$out.0.HJJ_PERINI = $in.0.HJJ_PERINI;
	$out.0.HJJ_PERFIN = $in.0.HJJ_PERFIN;
	$out.0.HJJ_TIPFXA = $in.0.HJJ_TIPFXA;
	$out.0.HJJ_TIPPER = $in.0.HJJ_TIPPER;
	$out.0.HJJ_INFPER = $in.0.HJJ_INFPER;
	$out.0.PARAM_FACT = "";

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="SimpleCopy" guiX="438" guiY="469" id="SIMPLE_COPY" type="SIMPLE_COPY"/>
<Edge debugMode="true" fromNode="DATA_GENERATOR:0" guiBendpoints="" guiRouter="Manhattan" id="Edge11" inPort="Port 1 (slave)" metadata="Metadata4" outPort="Port 0 (out)" toNode="EXT_HASH_JOIN:1"/>
<Edge debugMode="true" fromNode="DATA_GENERATOR1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge14" inPort="Port 1 (slave)" metadata="Metadata4" outPort="Port 0 (out)" toNode="EXT_HASH_JOIN1:1"/>
<Edge debugMode="true" fromNode="EXT_HASH_JOIN:0" guiBendpoints="" guiRouter="Manhattan" id="Edge18" inPort="Port 2 (slave)" metadata="Metadata6" outPort="Port 0 (out)" toNode="EXT_HASH_JOIN2:2"/>
<Edge debugMode="true" fromNode="EXT_HASH_JOIN1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge19" inPort="Port 1 (slave)" metadata="Metadata7" outPort="Port 0 (out)" toNode="EXT_HASH_JOIN2:1"/>
<Edge debugMode="true" fromNode="EXT_HASH_JOIN2:0" guiBendpoints="" guiRouter="Manhattan" id="Edge20" inPort="Port 0 (in)" metadata="Metadata9" outPort="Port 0 (out)" toNode="LOOKUP_JOIN:0"/>
<Edge debugMode="true" fromNode="HJJ:0" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (output)" toNode="REFORMAT1:0"/>
<Edge debugMode="true" fromNode="HJK:0" guiBendpoints="" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" toNode="REFORMAT:0"/>
<Edge debugMode="true" fromNode="LOOKUP_JOIN:0" guiBendpoints="" guiRouter="Manhattan" id="Edge34" inPort="Port 0 (input)" metadata="Metadata3" outPort="Port 0 (joined records)" toNode="MAQL_DML_EXECUTE_DELETE_DATA_FATO:0"/>
<Edge fromNode="REFORMAT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge13" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="SIMPLE_COPY:0"/>
<Edge debugMode="true" fromNode="REFORMAT1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge21" inPort="Port 0 (driver)" metadata="Metadata8" outPort="Port 0 (out)" toNode="EXT_HASH_JOIN2:0"/>
<Edge debugMode="true" fromNode="SIMPLE_COPY:0" guiBendpoints="" guiRouter="Manhattan" id="Edge9" inPort="Port 0 (driver)" metadata="Metadata0" outPort="Port 0 (out)" toNode="EXT_HASH_JOIN:0"/>
<Edge fromNode="SIMPLE_COPY:1" guiBendpoints="" guiRouter="Manhattan" id="Edge16" inPort="Port 0 (driver)" metadata="Metadata0" outPort="Port 1 (out)" toNode="EXT_HASH_JOIN1:0"/>
</Phase>
</Graph>
